class GameAction
{
	constructor()
	{
		this.senderId = 0;
		this.relay = true;
	}
	static register(action)
	{
		action.id = this.actions.push(action) - 1;
	}
	pack()
	{
		var buf = new Uint8Buffer();
		buf.append(Binary.fromUint32(this.constructor.id));
		buf.append(Binary.fromUint32(this.senderId));
		return buf;
	}
	static unpack(data)
	{
		var u8 = new Uint8Array(data);
		var br = new BinaryReader(u8);
		var actionId = br.readUint32();
		var senderId = br.readUint32();
		var action = this.actions[actionId].unpack(br);
		action.id = actionId;
		action.senderId = senderId;
		return action;
	}
}
GameAction.actions = [];

class NewPlayerAction extends GameAction
{
	constructor(nickname, country)
	{
		super();
		this.relay = false; // this action cannot be generated by clients and should therefore not be relayed by the server
		this.nickname = nickname;
		this.country = country;
	}
	pack()
	{
		var buf = super.pack();
		buf.append(Binary.fromString(this.nickname));
		buf.append(Binary.fromString(this.country));
		return buf.toArray();
	}
	static unpack(br)
	{
		var nickname = br.readString();
		var country = br.readString();
		return new this(nickname, country);
	}
}

class ConnectionAction extends GameAction
{
	constructor(nickname, country, password)
	{
		super();
		this.relay = false;
		this.nickname = nickname;
		this.country = country;
		this.password = password;
	}
	pack()
	{
		var buf = super.pack();
		buf.append(Binary.fromString(this.nickname));
		buf.append(Binary.fromString(this.country));
		buf.append(Binary.fromString(this.password));
		return buf.toArray();
	}
	static unpack(br)
	{
		var nickname = br.readString();
		var country = br.readString();
		var password = br.readString();
		return new this(nickname, country, password);
	}
}

class ChatAction extends GameAction
{
	constructor(text)
	{
		super();
		this.text = text;
	}
	pack()
	{
		var buf = super.pack();
		buf.append(Binary.fromString(this.text));
		return buf.toArray();
	}
	static unpack(br)
	{
		var text = br.readString();
		return new this(text);
	}
}

class ChangeTeamAction extends GameAction
{
	constructor(playerId, team)
	{
		super();
		this.playerId = playerId;
		this.team = team;
	}
	pack()
	{
		var buf = super.pack();
		buf.append(Binary.fromUint32(this.playerId));
		buf.append(Binary.fromUint8(this.team));
		return buf.toArray();
	}
	static unpack(br)
	{
		var playerId = br.readUint32();
		var team = br.readUint8();
		return new this(playerId, team);
	}
}

class LeaveAction extends GameAction
{
	constructor(reason, description)
	{
		super();
		this.reason = reason;
		this.description = description;
		if(this.description == null)
		{
			this.description = "";
		}

	}
	pack()
	{
		var buf = super.pack();
		buf.append(Binary.fromUint8(this.reason));
		buf.append(Binary.fromString(this.description));
		return buf.toArray();
	}
	static unpack(br)
	{
		var reason = br.readUint8();
		var description = br.readString();
		return new this(reason, description);
	}
}

class GameStateAction extends GameAction
{
	constructor(state)
	{
		super();
		this.state = state;
		this.relay = false;
	}
	pack()
	{
		var buf = super.pack();
		buf.append(this.state.pack());
		return buf.toArray();
	}
	static unpack(br)
	{
	//	var u8 = new Uint8Array(br.arr, br.offset, br.arr.length - br.arr.offset);
	//	var stateReader = new BinaryReader(u8);
		var state = GameState.unpack(br);
		return new this(state);
	}
}

GameAction.register(ChatAction);
GameAction.register(ConnectionAction);
GameAction.register(NewPlayerAction);
GameAction.register(LeaveAction);
GameAction.register(GameStateAction);
GameAction.register(ChangeTeamAction);

var LeaveReason = {
	DISCONNECT: 0,
	KICK: 1,
	BAN: 2
};

var Team = {
	RED: 0,
	SPECTATORS: 1,
	BLUE: 2
};
